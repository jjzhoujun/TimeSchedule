package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.TS;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table _table_common.
*/
public class TSDao extends AbstractDao<TS, Long> {

    public static final String TABLENAME = "_table_common";

    /**
     * Properties of entity TS.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property B_finish = new Property(1, Boolean.class, "b_finish", false, "B_FINISH");
        public final static Property S_title = new Property(2, String.class, "s_title", false, "S_TITLE");
        public final static Property I_status = new Property(3, Integer.class, "i_status", false, "I_STATUS");
    };


    public TSDao(DaoConfig config) {
        super(config);
    }
    
    public TSDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'_table_common' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: id
                "'B_FINISH' INTEGER," + // 1: b_finish
                "'S_TITLE' TEXT," + // 2: s_title
                "'I_STATUS' INTEGER);"); // 3: i_status
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX__table_common_ID ON _table_common" +
                " (ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'_table_common'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TS entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Boolean b_finish = entity.getB_finish();
        if (b_finish != null) {
            stmt.bindLong(2, b_finish ? 1l: 0l);
        }
 
        String s_title = entity.getS_title();
        if (s_title != null) {
            stmt.bindString(3, s_title);
        }
 
        Integer i_status = entity.getI_status();
        if (i_status != null) {
            stmt.bindLong(4, i_status);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TS readEntity(Cursor cursor, int offset) {
        TS entity = new TS( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // b_finish
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // s_title
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // i_status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TS entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setB_finish(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setS_title(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setI_status(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TS entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TS entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
